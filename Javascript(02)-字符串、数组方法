字符串方法

一、charAt()
返回在指定位置的字符。

var str="abc"
console.log(str.charAt(0))//a

二、charCodeAt()
返回在指定的位置的字符的 Unicode 编码。

var str="abc"
 console.log(str.charCodeAt(1))//98

三、concat()
连接字符串。

 var a = "abc";  
 var b = "def";  
 var c = a.concat(b);//字符a不会改变
 console.log(c);//abcdef

四、indexOf()
检索字符串。indexOf() 方法对大小写敏感！

var str="Hello world!"
console.log(str.indexOf("Hello"))//0
console.log(str.indexOf("World"))//-1
console.log(str.indexOf("world"))///6

五、match()
match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。

var str="1 abc 2 def 3"
console.log(str.match(/\d+/g))//123

六、replace()
replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。

var str="abc Def!"
console.log(str.replace(/abc/, "CBA"))//CBA Def!

七、search()
search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。要执行忽略大小写的检索，请追加标志 i。如果没有找到任何匹配的子串，则返回 -1。

var str="abc DEF!"
console.log(str.search(/DEF/))//4

八、slice()
提取字符串的片断，并在新的字符串中返回被提取的部分。
stringObject.slice(start,end);
start :要抽取的片断的起始下标。如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。
end：紧接着要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。

var str="abc def ghk"
console.log(str.slice(6))//f ghk

九、split()
把字符串分割为字符串数组。

console.log(str.split("符号（以这个符号来分割）"))
var str="abc def ghi jkl"    
console.log(str.split(" "))//["abc", "def", "ghi", "jkl"]
console.log(str.split("") )//["a", "b", "c", " ", "d", "e", "f", " ", "g", "h", "i", " ", "j", "k", "l"]
console.log(str.split(" ",3))//["abc", "def", "ghi"]

十、toLocaleLowerCase()
把字符串转换为小写。

var str="ABC def!"
console.log(str.toLocaleLowerCase())//abc def!

十一、toLocaleUpperCase()
把字符串转换为大写。

var str="ABC def!"
console.log(str.toLocaleUpperCase())//ABC DEF!

十二、toLowerCase()
把字符串转换为小写。

var str="ABC def!"
console.log(str.toLowerCase())//abc def!

十三、toUpperCase()
把字符串转换为大写。

var str="ABC def!"
console.log(str.toUpperCase())//ABC DEF!

十四、substr()
从起始索引号提取字符串中指定数目的字符。
stringObject.substr(start,length)。
start：必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。
length：可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。

var str="abc def"
console.log(str.substr(2))//c def
console.log(str.substr(2,4))// c de 

十五、substring()
提取字符串中两个指定的索引号之间的字符。
stringObject.substring(start,stop)。
start ：必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。
stop ：可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。

var str="abc def"
console.log(str.substring(2))//c def
console.log(str.substring(2,4))// c 
相同点：如果只是写一个参数，两者的作用都一样：都是是截取字符串从当前下标以后直到字符串最后的字符串片段。
substr(startIndex);
substring(startIndex);

var str = '123456789';
console.log(str.substr(2));    //  "3456789"
console.log(str.substring(2)) ;//  "3456789"
不同点：第二个参数
substr（startIndex,lenth）： 第二个参数是截取字符串的长度（从起始点截取某个长度的字符串）；
substring（startIndex, endIndex）： 第二个参数是截取字符串最终的下标 （截取2个位置之间的字符串,‘含头不含尾’）。

十六、trim()
取出两端空格
trimStart() 只去头
trimEnd() 只去尾 

-------------------------------------------------------------------------------------------------------------------------------
数组方法

1.Array.push(value1,value2,…）

向数组的末尾追加
返回值是添加数据后数组的新长度。
会改变原有数组
let arr = [1,2,3];
let result= arr.push(4,5);
console.log(result)   //5
console.log(arr)	//[1,2,3,4,5]


2.Array.unshift(value1,value2,…)

向数组的开头添加
返回值是添加数据后数组的新长度。
会改变原有数组
let arr = [1,2,3];
let result= arr.unshift(4,5);
console.log(result)   //5
console.log(arr)	//[4,5,1,2,3]


3.splice(index,0,value1,value2,…)

向数组的指定index处插入
返回的是被删除的元素。
会改变原有数组
如果只传入俩个参数那就是从【参数1】的位置删除【参数2】个个数

let arr = [1,2,3];
let result = arr.splice(2,0,4,5);
console.log(result)   //Array(0)
console.log(arr)	//[1,2,4,5,3]


二、向数组删除元素的方法：
1.pop()

从尾部删除一个元素
返回被删除掉的元素。
会改变原有数组
let arr = [1,2,3];
let result = arr.pop();
console.log(result)   //3
console.log(arr)	//[1,2]


2.shift()

从头部删除一个元素
返回被删除掉的元素。
会改变原有数组
let arr = [1,2,3];
let result = arr.shift();
console.log(result)   //1
console.log(arr)	//[2,3]


3.splice(index,howmany)

在index处删除howmany个元素，
返回的是被删除掉的元素的集合。
会改变原有数组
let arr = [1,2,3];
let result = arr.splice(1,2);
console.log(result)   //[2,3]
console.log(arr)	//[1]

三、数组排序的方法：
1.reverse()

反转，倒置
该方法会改变原有数组。
let arr = [1,2,3];
let result = arr.reverse();
console.log(result)   //[3,2,1]
console.log(arr)	//[3,2,1]

2.sort()

按指定规则排序
改变原有数组。
let arr = [2,1,3];
let result = arr.sort();
console.log(result)   //[1,2,3]
console.log(arr)	//[1,2,3]

注意：
如果你认为sort方法是让数组从小到大排序那就错了。
我们可以改变一下刚才的数组，加一些大一点的数字。

let arr = [25,148,12,6,38];
let result = arr.sort();
console.log(result)   //[12, 148, 25, 38, 6]
console.log(arr)	//[12, 148, 25, 38, 6]

有些朋友现在是不是稍微有一点懵了？
可是我们还是能找到一些规律的，他就是首先按照一个数字的第一个字符的大小去做比较，然后再用第二个字符去做比较，小的在前面，如果朋友们想让这个数组从真正的小到真正的大排序，那么我们可以改造一下刚才的代码。

let arr = [25,148,12,6,38];
let result = arr.sort((a,b) => a - b);
console.log(result)   //[6, 12, 25, 38, 148]
console.log(arr)	//[6, 12, 25, 38, 148]

如果想要从大到小排序那么就

let arr = [25,148,12,6,38];
let result = arr.sort((a,b) => b - a);
console.log(result)   //[148, 38, 25, 12, 6]
console.log(arr)	//[148, 38, 25, 12, 6]

总的来说，数组的sort方法里面的参数是一个回调函数，有俩个值，返回值如果是第一个值减去第二个值那么就是从小到大排序，如果是第二个值减去第一个值就是从大到小排序。

四、数组连接的方法：
1.concat()

数组连接
返回连接后的新数组。
let arr = [25,148,12,6,38],
	arr2 = [1,5,8]
let result = arr.concat(arr2);
console.log(result)   //[25, 148, 12, 6, 38, 1, 5, 8]
console.log(arr)	//[25, 148, 12, 6, 38]



2.join()

将数组的每个元素以指定分隔符(默认为“,”)连接成字符
返回该连接完成后的字符串。
let arr = [25,148,12,6,38];
let result = arr.join(),
	result2 = arr.join('+')
console.log(result)   //25,148,12,6,38
console.log(result2)   //25+148+12+6+38
console.log(arr)	//[25, 148, 12, 6, 38]



五、数组截取的方法：
1.slice(start,end)

从start起始索引处，截取到end结束索引处
返回截取到的元素集合。
注意：
如果不传值那么就是直接拷贝了一份数组的值。
end可以不传值，表示截取到数组的末尾。start与end也可以取负值，取负值表示从后向前计数。
let arr = [1,2,3,4,5,6,7];
let result = arr.slice(),
	result2 = arr.slice(2),
	result3 = arr.slice(2,4);
console.log(result)   //[1, 2, 3, 4, 5, 6, 7]
console.log(result2)   //[3, 4, 5, 6, 7]
console.log(result3)	//[3, 4]
console.log(arr)	//[1, 2, 3, 4, 5, 6, 7]


六、数组转换的方法：
1.toString()

转换为字符串，和不传参数的join()一致，还可以使用2，8，16进制转变为不同结果。
let arr = [1,2,3,4,5,6];
let result = arr.toString();
console.log(result)   //1,2,3,4,5,6
console.log(arr)	//[1,2,3,4,5,6]

提取数组指定深度的方法：
比如说现在有一个这样的数组:
[1,2,[3,4,[5,6]]],
我想将它输出为[1,2,3,4,5,6]。
如果自己去写递归的话还是比较麻烦的。
那么我们可以使用数组本身的flat方法来深度解析。
1.flat()

按照指定的深度递归遍历数组
返回值是遍历到的所有元素集合。
let arr = [1,2,[3,4,[5,6]]],
	res = arr.flat(Infinity),  //无限递归，直到最后
	res2 = arr.flat();		//如果不传参数那么只递归一次
console.log(arr)   //[1,2,[3,4,[5,6]]]
console.log(res)   //[1, 2, 3, 4, 5, 6]
console.log(res2)	//[1,2,3,4,[5,6]]

---------------------------------------------------------------------------


