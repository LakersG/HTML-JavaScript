定时器

定时执行代码的功能，由setTimeout()和setInterval两个函数来完成

setTimeout（function(){},秒数（多少毫秒后执行））
返回一个整数表示定时器的编号，以后可以用来取消这个定时器

注意
如果回调函数是对象的方法，那么setTimeout使得方法内部的this关键字指向全局环境，而不是定义时所在的那个对象
解决方案：var that = this

var name="wang"
var user{
    name:"qi",
    getName:function(){
        console.log("this.name");//打印qi
        setTimeout(function(){
         console.log("this.name")
        },1000)//打印全局的变量wang
    }
}

定时器时可以取消的
clearTimeout(定时器名)

setInterval
setInterval（function(){},秒数（间隔多少毫秒执行））
写法和setTimeout完全一致
实现动画
        #index{
            width: 200px;
            height: 200px;
            background: red;
            opacity: 1;
        }

        <div id="index"></div>
        var div=document.getElementById("index");
        var opacity = 1;
        var fader = setInterval(function() {
            opacity-=0.05;
            if(opacity>0)
            {
                div.style.opacity = opacity;
            }else{
                clearInterval(fader);
            }
        
        }, 300);

--------------------------------------------------------

防抖和节流

防抖（debounce）
属于性能优化的知识，放任不管容易引起浏览器卡死

        function showTop()
        {
            var scrollTop = document.documentElement.scrollTop;
            console.log("滚动条位置："+ scrollTop);
        }
        window.onscroll = showTop;//不用加括号

问题：执行次数过于频繁
解决思路：
1.第一次出发事件时，不立即执行函数，而是给出一个期限值比如200ms，
如果200ms内再次触发滚动事件，那么取消当前的计时，重新计时
如果200ms内没有再次触发，执行函数

        function debounce(fn,delay){
            var timer = null;
            return function()
            {
                if(timer){
                clearTimeout(timer)
            }
            timer = setTimeout(fn,delay)
            }
        }
        window.onscroll = debounce(showTop,200);

        function showTop()
        {
            var scrollTop = document.documentElement.scrollTop;
            console.log("滚动条位置："+ scrollTop);
        }

---------------------------------------------------------------
节流
属于性能优化的知识
防抖中若用户拖着滚动条不动的话无法输出

        functinon throttle(fn,delay)
        {
            var valid = true;
            return function(){
                if(!valid){
                    return false;
                }
                valid=false;
                setTimeout(function(){
                    fn();
                    valid = true;
                },delay)
            }
        }
        window.onscroll = throttle(showTop,200);


        function showTop()
        {
            var scrollTop = document.documentElement.scrollTop;
            console.log("滚动条位置："+ scrollTop);
        }








