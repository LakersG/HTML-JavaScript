盒子模型

包括内容
{
  外边距（margin）
  边框（border）
  内边距（padding）
  实际内容（content）
}

margin（不包含在盒子中）
{
  若为两个值
  第一个值：上下
  第二个值：左右

  四个值
  margin-left
  margin-right
  margin-top
  margin-button
}

padding
{
    若为两个值
  第一个值：上下
  第二个值：左右

  四个值
  margin-left
  margin-right
  margin-top
  margin-button
}

border
宽度 类型 颜色

-------------------------------------------------

弹性盒子模型
设置display属性为 "flex"

默认弹性盒子内容横向摆放
flex-direction:
{
  row 横向
  row-reverse 横向反转
  column 纵向
  column-reverse 纵向反转
}

父元素性质
justify-content(内容对齐)
{
  flex-start 居上
  flex-end 居下
  flex-cen 居中
}

align-items
{
  flex-start 居左
  flex-end 居右
  flex-cen 居中
}

子元素上的性质

文档流
1.空格折叠（多个空格只显示一个）
办法：脱离标准 文档流
{
  浮动
  绝对定位
  固定定位
}

浮动：增加浮层放置内容
float属性 ：left right
应用：ul li标签水平摆放

清除浮动
设置float后，会使元素脱离文档流移动
子元素浮动造成父元素高度塌陷
方案：
1.父元素设置高度
2.受影响元素增加clear属性
clear
{
  left
  right
  both
}
3.overflow 清除浮动
{
  overflow ：hidden
  clear ：both
}
4.伪对象方式：after
格式 ：
."类名"::after
{
  display:block
  clear:both
}
哪个子元素出问题，哪个元素+clear

----------------------------------------------

定位
position属性

relative 相对定位（不脱离文档流，父级一般用这个）

abusolute 绝对定位
{
  用于相互压盖.每设置一个绝对定位，都是一层，都可以压盖
}

fixed 固定定位
{
  也脱离文档流
  用途：页面滚动时不发生变化
}

相对定位和绝对定位是相对于具有定位的父级元素，若不存在则逐级向上寻找，直到顶层

例子
.container
{
  position:relative 
  //若container为相对定位，则box1相对container移动
  //若container为绝对定位，则box1相对页面移动
}

.box1
{
  position:absolute
}

------------------------------------------------

CSS3 新特性
border-radius（圆角属性）
两种调整方式
{
  px
  百分比（100%变成圆形）
}
1.四个值-> 四个角分别设置，按左上、右上、左下、右下
2.三个值-> 左上、右上和左下、右下
3.两个值-> 左上和右下、右上和左下
4.一个值-> 四个角相同

box-shadow（阴影）
{
  h-shaow 必选-水平方向
  v-shadow 必选-垂直方向
  blur 模糊距离
  color 阴影颜色
}

















